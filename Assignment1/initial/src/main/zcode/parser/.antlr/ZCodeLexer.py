# Generated from /Users/macbookpro/Documents/Assignment_PPL/Assignment1/initial/src/main/zcode/parser/ZCode.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,52,392,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,1,0,1,
        0,1,0,1,0,5,0,122,8,0,10,0,12,0,125,9,0,1,0,1,0,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,
        1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,
        1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,
        10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,
        14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,
        16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,
        18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,
        20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,
        24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,
        29,1,30,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,
        34,1,35,1,35,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,
        40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,3,43,291,8,43,1,43,3,43,294,
        8,43,3,43,296,8,43,1,44,4,44,299,8,44,11,44,12,44,300,1,45,1,45,
        5,45,305,8,45,10,45,12,45,308,9,45,1,46,1,46,3,46,312,8,46,1,46,
        4,46,315,8,46,11,46,12,46,316,1,47,1,47,1,47,1,47,1,47,1,47,1,47,
        1,47,1,47,3,47,328,8,47,1,48,1,48,5,48,332,8,48,10,48,12,48,335,
        9,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,3,49,344,8,49,1,50,1,50,
        1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,3,51,365,8,51,1,52,4,52,368,8,52,11,52,12,52,
        369,1,53,1,53,5,53,374,8,53,10,53,12,53,377,9,53,1,54,4,54,380,8,
        54,11,54,12,54,381,1,54,1,54,1,55,1,55,1,55,1,56,1,56,1,57,1,57,
        0,0,58,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
        25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,
        47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,
        69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,0,
        91,0,93,0,95,45,97,46,99,0,101,0,103,0,105,47,107,48,109,49,111,
        50,113,51,115,52,1,0,9,2,0,10,10,13,13,1,0,48,57,2,0,69,69,101,101,
        2,0,43,43,45,45,4,0,10,10,13,13,34,34,92,92,2,0,39,39,92,92,3,0,
        65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,
        32,405,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
        0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,
        0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,
        0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,
        0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,
        0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,
        0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,
        0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,
        0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,95,1,0,0,
        0,0,97,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,
        0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,1,117,1,0,0,0,3,128,1,0,0,0,5,
        135,1,0,0,0,7,139,1,0,0,0,9,142,1,0,0,0,11,146,1,0,0,0,13,150,1,
        0,0,0,15,156,1,0,0,0,17,161,1,0,0,0,19,165,1,0,0,0,21,172,1,0,0,
        0,23,180,1,0,0,0,25,183,1,0,0,0,27,188,1,0,0,0,29,191,1,0,0,0,31,
        196,1,0,0,0,33,201,1,0,0,0,35,207,1,0,0,0,37,213,1,0,0,0,39,220,
        1,0,0,0,41,229,1,0,0,0,43,233,1,0,0,0,45,239,1,0,0,0,47,241,1,0,
        0,0,49,243,1,0,0,0,51,245,1,0,0,0,53,247,1,0,0,0,55,249,1,0,0,0,
        57,251,1,0,0,0,59,254,1,0,0,0,61,257,1,0,0,0,63,260,1,0,0,0,65,262,
        1,0,0,0,67,264,1,0,0,0,69,267,1,0,0,0,71,270,1,0,0,0,73,274,1,0,
        0,0,75,276,1,0,0,0,77,278,1,0,0,0,79,280,1,0,0,0,81,282,1,0,0,0,
        83,284,1,0,0,0,85,286,1,0,0,0,87,288,1,0,0,0,89,298,1,0,0,0,91,302,
        1,0,0,0,93,309,1,0,0,0,95,327,1,0,0,0,97,329,1,0,0,0,99,343,1,0,
        0,0,101,345,1,0,0,0,103,347,1,0,0,0,105,367,1,0,0,0,107,371,1,0,
        0,0,109,379,1,0,0,0,111,385,1,0,0,0,113,388,1,0,0,0,115,390,1,0,
        0,0,117,118,5,35,0,0,118,119,5,35,0,0,119,123,1,0,0,0,120,122,8,
        0,0,0,121,120,1,0,0,0,122,125,1,0,0,0,123,121,1,0,0,0,123,124,1,
        0,0,0,124,126,1,0,0,0,125,123,1,0,0,0,126,127,6,0,0,0,127,2,1,0,
        0,0,128,129,5,114,0,0,129,130,5,101,0,0,130,131,5,116,0,0,131,132,
        5,117,0,0,132,133,5,114,0,0,133,134,5,110,0,0,134,4,1,0,0,0,135,
        136,5,102,0,0,136,137,5,111,0,0,137,138,5,114,0,0,138,6,1,0,0,0,
        139,140,5,105,0,0,140,141,5,102,0,0,141,8,1,0,0,0,142,143,5,78,0,
        0,143,144,5,79,0,0,144,145,5,84,0,0,145,10,1,0,0,0,146,147,5,118,
        0,0,147,148,5,97,0,0,148,149,5,114,0,0,149,12,1,0,0,0,150,151,5,
        117,0,0,151,152,5,110,0,0,152,153,5,116,0,0,153,154,5,105,0,0,154,
        155,5,108,0,0,155,14,1,0,0,0,156,157,5,101,0,0,157,158,5,108,0,0,
        158,159,5,115,0,0,159,160,5,101,0,0,160,16,1,0,0,0,161,162,5,97,
        0,0,162,163,5,110,0,0,163,164,5,100,0,0,164,18,1,0,0,0,165,166,5,
        110,0,0,166,167,5,117,0,0,167,168,5,109,0,0,168,169,5,98,0,0,169,
        170,5,101,0,0,170,171,5,114,0,0,171,20,1,0,0,0,172,173,5,100,0,0,
        173,174,5,121,0,0,174,175,5,110,0,0,175,176,5,97,0,0,176,177,5,109,
        0,0,177,178,5,105,0,0,178,179,5,99,0,0,179,22,1,0,0,0,180,181,5,
        98,0,0,181,182,5,121,0,0,182,24,1,0,0,0,183,184,5,101,0,0,184,185,
        5,108,0,0,185,186,5,105,0,0,186,187,5,102,0,0,187,26,1,0,0,0,188,
        189,5,111,0,0,189,190,5,114,0,0,190,28,1,0,0,0,191,192,5,98,0,0,
        192,193,5,111,0,0,193,194,5,111,0,0,194,195,5,108,0,0,195,30,1,0,
        0,0,196,197,5,102,0,0,197,198,5,117,0,0,198,199,5,110,0,0,199,200,
        5,99,0,0,200,32,1,0,0,0,201,202,5,98,0,0,202,203,5,114,0,0,203,204,
        5,101,0,0,204,205,5,97,0,0,205,206,5,107,0,0,206,34,1,0,0,0,207,
        208,5,98,0,0,208,209,5,101,0,0,209,210,5,103,0,0,210,211,5,105,0,
        0,211,212,5,110,0,0,212,36,1,0,0,0,213,214,5,115,0,0,214,215,5,116,
        0,0,215,216,5,114,0,0,216,217,5,105,0,0,217,218,5,110,0,0,218,219,
        5,103,0,0,219,38,1,0,0,0,220,221,5,99,0,0,221,222,5,111,0,0,222,
        223,5,110,0,0,223,224,5,116,0,0,224,225,5,105,0,0,225,226,5,110,
        0,0,226,227,5,117,0,0,227,228,5,101,0,0,228,40,1,0,0,0,229,230,5,
        101,0,0,230,231,5,110,0,0,231,232,5,100,0,0,232,42,1,0,0,0,233,234,
        5,97,0,0,234,235,5,114,0,0,235,236,5,114,0,0,236,237,5,97,0,0,237,
        238,5,121,0,0,238,44,1,0,0,0,239,240,5,43,0,0,240,46,1,0,0,0,241,
        242,5,45,0,0,242,48,1,0,0,0,243,244,5,42,0,0,244,50,1,0,0,0,245,
        246,5,47,0,0,246,52,1,0,0,0,247,248,5,37,0,0,248,54,1,0,0,0,249,
        250,5,61,0,0,250,56,1,0,0,0,251,252,5,60,0,0,252,253,5,45,0,0,253,
        58,1,0,0,0,254,255,5,61,0,0,255,256,5,61,0,0,256,60,1,0,0,0,257,
        258,5,33,0,0,258,259,5,61,0,0,259,62,1,0,0,0,260,261,5,60,0,0,261,
        64,1,0,0,0,262,263,5,62,0,0,263,66,1,0,0,0,264,265,5,60,0,0,265,
        266,5,61,0,0,266,68,1,0,0,0,267,268,5,62,0,0,268,269,5,61,0,0,269,
        70,1,0,0,0,270,271,5,46,0,0,271,272,5,46,0,0,272,273,5,46,0,0,273,
        72,1,0,0,0,274,275,5,40,0,0,275,74,1,0,0,0,276,277,5,41,0,0,277,
        76,1,0,0,0,278,279,5,91,0,0,279,78,1,0,0,0,280,281,5,93,0,0,281,
        80,1,0,0,0,282,283,5,44,0,0,283,82,1,0,0,0,284,285,5,58,0,0,285,
        84,1,0,0,0,286,287,5,59,0,0,287,86,1,0,0,0,288,295,3,89,44,0,289,
        291,3,91,45,0,290,289,1,0,0,0,290,291,1,0,0,0,291,293,1,0,0,0,292,
        294,3,93,46,0,293,292,1,0,0,0,293,294,1,0,0,0,294,296,1,0,0,0,295,
        290,1,0,0,0,295,296,1,0,0,0,296,88,1,0,0,0,297,299,7,1,0,0,298,297,
        1,0,0,0,299,300,1,0,0,0,300,298,1,0,0,0,300,301,1,0,0,0,301,90,1,
        0,0,0,302,306,5,46,0,0,303,305,7,1,0,0,304,303,1,0,0,0,305,308,1,
        0,0,0,306,304,1,0,0,0,306,307,1,0,0,0,307,92,1,0,0,0,308,306,1,0,
        0,0,309,311,7,2,0,0,310,312,7,3,0,0,311,310,1,0,0,0,311,312,1,0,
        0,0,312,314,1,0,0,0,313,315,7,1,0,0,314,313,1,0,0,0,315,316,1,0,
        0,0,316,314,1,0,0,0,316,317,1,0,0,0,317,94,1,0,0,0,318,319,5,116,
        0,0,319,320,5,114,0,0,320,321,5,117,0,0,321,328,5,101,0,0,322,323,
        5,102,0,0,323,324,5,97,0,0,324,325,5,108,0,0,325,326,5,115,0,0,326,
        328,5,101,0,0,327,318,1,0,0,0,327,322,1,0,0,0,328,96,1,0,0,0,329,
        333,3,101,50,0,330,332,3,99,49,0,331,330,1,0,0,0,332,335,1,0,0,0,
        333,331,1,0,0,0,333,334,1,0,0,0,334,336,1,0,0,0,335,333,1,0,0,0,
        336,337,3,101,50,0,337,338,6,48,1,0,338,98,1,0,0,0,339,344,3,103,
        51,0,340,341,5,39,0,0,341,344,5,34,0,0,342,344,8,4,0,0,343,339,1,
        0,0,0,343,340,1,0,0,0,343,342,1,0,0,0,344,100,1,0,0,0,345,346,5,
        34,0,0,346,102,1,0,0,0,347,364,5,92,0,0,348,349,5,32,0,0,349,350,
        5,98,0,0,350,365,5,32,0,0,351,352,5,32,0,0,352,353,5,102,0,0,353,
        365,5,32,0,0,354,355,5,32,0,0,355,356,5,114,0,0,356,365,5,32,0,0,
        357,358,5,32,0,0,358,359,5,110,0,0,359,365,5,32,0,0,360,361,5,32,
        0,0,361,362,5,116,0,0,362,365,5,32,0,0,363,365,7,5,0,0,364,348,1,
        0,0,0,364,351,1,0,0,0,364,354,1,0,0,0,364,357,1,0,0,0,364,360,1,
        0,0,0,364,363,1,0,0,0,365,104,1,0,0,0,366,368,7,1,0,0,367,366,1,
        0,0,0,368,369,1,0,0,0,369,367,1,0,0,0,369,370,1,0,0,0,370,106,1,
        0,0,0,371,375,7,6,0,0,372,374,7,7,0,0,373,372,1,0,0,0,374,377,1,
        0,0,0,375,373,1,0,0,0,375,376,1,0,0,0,376,108,1,0,0,0,377,375,1,
        0,0,0,378,380,7,8,0,0,379,378,1,0,0,0,380,381,1,0,0,0,381,379,1,
        0,0,0,381,382,1,0,0,0,382,383,1,0,0,0,383,384,6,54,0,0,384,110,1,
        0,0,0,385,386,9,0,0,0,386,387,6,55,2,0,387,112,1,0,0,0,388,389,9,
        0,0,0,389,114,1,0,0,0,390,391,9,0,0,0,391,116,1,0,0,0,16,0,123,290,
        293,295,300,306,311,316,327,333,343,364,369,375,381,3,6,0,0,1,48,
        0,1,55,1
    ]

class ZCodeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    ZCODE_COMMENT = 1
    RETURN = 2
    FOR = 3
    IF = 4
    NOT = 5
    VAR = 6
    UNTIL = 7
    ELSE = 8
    AND = 9
    NUMBER = 10
    DYNAMIC = 11
    BY = 12
    ELIF = 13
    OR = 14
    BOOL = 15
    FUNC = 16
    BREAK = 17
    BEGIN = 18
    STRING = 19
    CONTINUE = 20
    END = 21
    ARRAY = 22
    PLUS = 23
    MINUS = 24
    TIMES = 25
    DIVIDED = 26
    MOD = 27
    EQUAL = 28
    ASSIGN = 29
    COMPARE = 30
    NOT_EQUAL = 31
    LT = 32
    GT = 33
    LTOE = 34
    GTOE = 35
    CONCATENATION = 36
    LEFTPAREN = 37
    RIGHTPAREN = 38
    LEFTBRACKET = 39
    RIGHTBRACKET = 40
    COMMA = 41
    COLON = 42
    SEMI = 43
    NUMBER_LITERAL = 44
    BOOLEAN_LITERAL = 45
    STRING_LITERAL = 46
    SIZE = 47
    IDENTIFIER = 48
    WS = 49
    ERROR_CHAR = 50
    UNCLOSE_STRING = 51
    ILLEGAL_ESCAPE = 52

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'return'", "'for'", "'if'", "'NOT'", "'var'", "'until'", "'else'", 
            "'and'", "'number'", "'dynamic'", "'by'", "'elif'", "'or'", 
            "'bool'", "'func'", "'break'", "'begin'", "'string'", "'continue'", 
            "'end'", "'array'", "'+'", "'-'", "'*'", "'/'", "'%'", "'='", 
            "'<-'", "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", "'...'", 
            "'('", "')'", "'['", "']'", "','", "':'", "';'" ]

    symbolicNames = [ "<INVALID>",
            "ZCODE_COMMENT", "RETURN", "FOR", "IF", "NOT", "VAR", "UNTIL", 
            "ELSE", "AND", "NUMBER", "DYNAMIC", "BY", "ELIF", "OR", "BOOL", 
            "FUNC", "BREAK", "BEGIN", "STRING", "CONTINUE", "END", "ARRAY", 
            "PLUS", "MINUS", "TIMES", "DIVIDED", "MOD", "EQUAL", "ASSIGN", 
            "COMPARE", "NOT_EQUAL", "LT", "GT", "LTOE", "GTOE", "CONCATENATION", 
            "LEFTPAREN", "RIGHTPAREN", "LEFTBRACKET", "RIGHTBRACKET", "COMMA", 
            "COLON", "SEMI", "NUMBER_LITERAL", "BOOLEAN_LITERAL", "STRING_LITERAL", 
            "SIZE", "IDENTIFIER", "WS", "ERROR_CHAR", "UNCLOSE_STRING", 
            "ILLEGAL_ESCAPE" ]

    ruleNames = [ "ZCODE_COMMENT", "RETURN", "FOR", "IF", "NOT", "VAR", 
                  "UNTIL", "ELSE", "AND", "NUMBER", "DYNAMIC", "BY", "ELIF", 
                  "OR", "BOOL", "FUNC", "BREAK", "BEGIN", "STRING", "CONTINUE", 
                  "END", "ARRAY", "PLUS", "MINUS", "TIMES", "DIVIDED", "MOD", 
                  "EQUAL", "ASSIGN", "COMPARE", "NOT_EQUAL", "LT", "GT", 
                  "LTOE", "GTOE", "CONCATENATION", "LEFTPAREN", "RIGHTPAREN", 
                  "LEFTBRACKET", "RIGHTBRACKET", "COMMA", "COLON", "SEMI", 
                  "NUMBER_LITERAL", "INTEGERPART", "DECIMALPART", "EXPONENTPART", 
                  "BOOLEAN_LITERAL", "STRING_LITERAL", "CHARLIST", "DOUBLEQUOTE", 
                  "ESCAPE", "SIZE", "IDENTIFIER", "WS", "ERROR_CHAR", "UNCLOSE_STRING", 
                  "ILLEGAL_ESCAPE" ]

    grammarFileName = "ZCode.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[48] = self.STRING_LITERAL_action 
            actions[55] = self.ERROR_CHAR_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def STRING_LITERAL_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.text =self.text[1:-1]
     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            raise ErrorToken(self.text)
     


