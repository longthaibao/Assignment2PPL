Program([FuncDecl(Id(merge), [VarDecl(Id(arr), ArrayType([100.0], NumberType), None, None), VarDecl(Id(left), NumberType, None, None), VarDecl(Id(mid), NumberType, None, None), VarDecl(Id(right), NumberType, None, None)], Block([VarDecl(Id(i), NumberType, None, None), VarDecl(Id(j), NumberType, None, None), VarDecl(Id(k), NumberType, None, None), VarDecl(Id(n1), NumberType, None, BinaryOp(+, BinaryOp(-, Id(mid), Id(left)), NumLit(1.0))), VarDecl(Id(n2), NumberType, None, BinaryOp(-, Id(right), Id(mid))), VarDecl(Id(L), ArrayType([100.0], NumberType), None, None), VarDecl(Id(R), ArrayType([100.0], NumberType), None, None), For(Id(i), BinaryOp(<, Id(i), Id(n1)), NumLit(1.0), AssignStmt(ArrayCell(Id(L), [Id(i)]), ArrayCell(Id(arr), [BinaryOp(+, Id(left), Id(i))]))), For(Id(j), BinaryOp(<, Id(j), Id(n2)), NumLit(1.0), AssignStmt(ArrayCell(Id(R), [Id(j)]), ArrayCell(Id(arr), [BinaryOp(+, BinaryOp(+, Id(mid), NumLit(1.0)), Id(j))]))), AssignStmt(Id(i), NumLit(0.0)), AssignStmt(Id(j), NumLit(0.0)), AssignStmt(Id(k), Id(left)), For(Id(k), BinaryOp(<=, Id(k), Id(right)), NumLit(1.0), Block([If(BinaryOp(or, BinaryOp(and, BinaryOp(<, Id(i), Id(n1)), BinaryOp(>=, Id(j), Id(n2))), BinaryOp(<=, ArrayCell(Id(L), [Id(i)]), ArrayCell(Id(R), [Id(j)]))), Block([AssignStmt(ArrayCell(Id(arr), [Id(k)]), ArrayCell(Id(L), [Id(i)])), AssignStmt(Id(i), BinaryOp(+, Id(i), NumLit(1.0)))])), [], Block([AssignStmt(ArrayCell(Id(arr), [Id(k)]), ArrayCell(Id(R), [Id(j)])), AssignStmt(Id(j), BinaryOp(+, Id(j), NumLit(1.0)))])]))])), FuncDecl(Id(mergeSort), [VarDecl(Id(arr), ArrayType([100.0], NumberType), None, None), VarDecl(Id(left), NumberType, None, None), VarDecl(Id(right), NumberType, None, None)], Block([If(BinaryOp(<, Id(left), Id(right)), Block([VarDecl(Id(mid), NumberType, None, BinaryOp(/, BinaryOp(+, Id(left), Id(right)), NumLit(2.0))), CallStmt(Id(mergeSort), [Id(arr), Id(left), Id(mid)]), CallStmt(Id(mergeSort), [Id(arr), BinaryOp(+, Id(mid), NumLit(1.0)), Id(right)]), CallStmt(Id(merge), [Id(arr), Id(left), Id(mid), Id(right)])])), [], None]))])