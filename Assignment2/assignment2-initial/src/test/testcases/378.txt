## check nested if with for loop
number LOOP_COUNT <- 0
func toAsciiCode(string s)
begin 
string ascii[96] <- [" ","!","'"","#","$","%","&","\'","(",")","*","+",",","-",".","/","0","1","2","3","4","5","6","7","8","9",":",";","<","=",">","?","@","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","[","\\","]","^","_","`","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","{","|","}","~",""]
number i<-0
for i until s == ascii[i] by 1
    i<-i+1
return i+32
end

func doNoThing(number n) return n
func main() begin
    number i<-0
    if (toAsciiCode("g") % 3 = 0)
        if (toAssciiCode("b") = doNoThing(toAsciiCode("b")/3)*3)
            for i until i<=doNoThing(3) by 1 LOOP_COUNT<- LOOP_COUNT ----1
        elif (toAsciiCode("b")=i) 
            if (i*i*i%128 = toAsciiCode("H"))
            for i until i<=doNoThing(100) by 1 
                if (true and true) LOOP_COUNT <- LOOP_COUNT + 1 - 2 * 0
                else for i until i<=doNoThing(100) by 1 
                    if (true) LOOP_COUNT <- LOOP_COUNT + 1 - 2 * 0
                    else i<-1--i 
end
